#!/bin/bash  

# this script connects via SSH to the destination host, starts an X11VNC server and connects to it
# it uses randomized IP addresses and ports so that the possibility of clashing with other listening programs is minimized
#
# To install the packages needed (e.g. in Ubuntu):
#  apt-get install x11vnc ssvnc

# bail if not enough options
if [[ "${1:-}" = "" ]]; then
	echo "Usage: $0 hostname [vncviewer-options]"
	exit 1
fi


# range of usable ports
FLOOR=25900
RANGE=25999
LOCAL_PORT=0
while [[ "$LOCAL_PORT" -le ${FLOOR} ]]
do
  LOCAL_PORT=$RANDOM
  let "LOCALPORT %= $RANGE"
done

# set the same port for remote and local
REMOTE_PORT=${LOCAL_PORT}

RANGE=255
IP_PART=$RANDOM
let "IP_PART %= $RANGE"

# use a random localhost IP address
LOCALHOST_IP=127.59.${IP_PART}.1

# SSH to the 1st argument, start x11vnc there
ssh $1 -L "$LOCALHOST_IP:$LOCAL_PORT:$LOCALHOST_IP:$REMOTE_PORT" -vvv "x11vnc -nopw -ncache -display :0 -listen $LOCALHOST_IP -noipv6 -norc -wireframe -rfbport $REMOTE_PORT " &
SSH_PID=$!
# ^ save SSH PID to kill the connection later

# don't use $1 anymore
shift
# wait for the connection to be established, just to be on the safe side
sleep 10
# launch the viewer - it will not look great, but will have lower bandwidth requirements
ssvnc -viewer -use64 -nocursorshape -nobell -encodings hextile -sendclipboard -scale 0.9 "$@" ${LOCALHOST_IP}::${LOCAL_PORT} &
# alternately, use the command
##vncviewer 127.59.0.1:$LOCAL_PORT

wait $!
# ^ wait for VNC to exit
# close the SSH tunnel if it didn't close automatically
kill ${SSH_PID} 2> /dev/null || true
